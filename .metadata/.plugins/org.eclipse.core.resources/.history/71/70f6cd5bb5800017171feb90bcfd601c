package blackjack;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Game {

	private static final int INIT_RECEIVE_CARD_COUNT = 2;

	//TODO numver確認
	private static final int STOP_RECEIVE_CARD = 10;

	public void play() {
		System.out.println("★BlackJack Start★");
		Scanner sc = new Scanner(System.in);

		List<Player> players = Arrays.asList(new Gamer(), new Dealer());
//		Dealer dealer = new Dealer();
//		Gamer gamer = new Gamer();
		Rule rule = new Rule();

		CardDeck cardDeck = new CardDeck();
		Card card = cardDeck.draw();

		initPhase(cardDeck, players);
		playingCheck(sc, cardDeck, players);

	}

	private void playingCheck(Scanner sc, CardDeck cardDeck, List<Player> players) {

		String gamerInput;
		String dealerInput;

		boolean isGameTurn = false;
		boolean isDealerTurn = false;

		while(true) {

			boolean isAllPlayerTurnOff = receiveCardAllPlayer(sc, cardDeck, players);
//			System.out.println("カードをDrawしますか。終了は０です");
//			gamerInput = sc.nextLine();
//
//			if("0".equals(gamerInput)) {
//				isGameTurn = false;
//			} else {
//
//				Card card = cardDeck.draw();
//				dealer.receiveCard(card);
//			}
//
//			if(isGameTurn && isDealerTurn) {
//
//				break;
//			}

			if(isAllPlayerTurnOff) {

				break;
			}
		}


	}

	private boolean receiveCardAllPlayer(Scanner sc, CardDeck cardDeck, List<Player> players) {

		boolean isAllPlayerTurnOff = true;

		for(Player player : players) {
			if(isReceiveCard(sc)) {

				Card card  = cardDeck.draw();
				player.receiveCard(card);
				isAllPlayerTurnOff = false;

			} else {

				isAllPlayerTurnOff = true;
			}

			return isAllPlayerTurnOff;
		}


		return null;
	}

	private boolean isReceiveCard (Scanner sc) {
		System.out.println("カードをDrawしますか。終了は０です");
		return !STOP_RECEIVE_CARD.equals(sc.nextLine());
	}

	private void initPhase(CardDeck cardDeck, List<Player> players) {

		System.out.println("最初は２枚のカードをDRAWします。");
		for(int i = 0; i < INIT_RECEIVE_CARD_COUNT; i++) {

			for (Player player : players) {
				Card card = cardDeck.draw();
				player.receiveCard(card);
			}

		}

	}

}
